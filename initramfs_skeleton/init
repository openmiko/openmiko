#!/bin/sh
# devtmpfs does not get automounted for initramfs
/bin/mount -t devtmpfs devtmpfs /dev

# Setup this program to get input from /dev/console, and output to /dev/console
# file descriptor #0: standard input stream, or stdin for short.
# file descriptor #1: standard output stream, or stdout for short.
# file descriptor #2: standard error output stream, or stderr for short.
exec 0</dev/console
exec 1>/dev/console
exec 2>/dev/console


read -n 1 -s -r -t 2 -p "Press any key to interrupt init" 

if [ $? -eq 0 ]
then
  echo "Dropping to a shell"
  exec /bin/sh
fi


echo "Starting full root buildout"

mount -t proc proc /proc
mount -t sysfs sysfs /sys

echo "Mounted core filesystems"



/bin/busybox --install /bin


setup_sdcard_access() {
	mkdir -p /sdcard
	mount -t vfat /dev/mmcblk0p1 /sdcard -o rw,umask=0000,dmask=0000
	sleep 1
	echo "Mount /sdcard successful"
}

# Determine if sdcard access needs to be setup
# On WyzeCam Pan units the /dev/mmcblk0p1 is available without having
# to export pin 43. However on WyzeCams you need to export 43
# for the mmc devices to show up

if [ -e /dev/mmcblk0p1 ]; then
	setup_sdcard_access
else
	# If the device doesn't exist then either the sdcard is not present or we need to export the pin
	echo 43 > /sys/class/gpio/export
	echo out > /sys/class/gpio/gpio43/direction
	sleep 3

	# If after exporting the device exists then setup
	if [ -e /dev/mmcblk0p1 ]; then
		setup_sdcard_access
	else
		# If it still doesn't exist then unexport and continue
		echo 43 > /sys/class/gpio/unexport 
	fi;
fi;

# About the earliest we can read configuration parameters
OPENMIKO_CONFIG_FILE=/sdcard/config/overlay/etc/openmiko.conf
if [[ -f $OPENMIKO_CONFIG_FILE ]]; then
	. $OPENMIKO_CONFIG_FILE
fi


if [[ "$ENABLE_DEBUG" == "1" ]]; then
	echo "Enabling kernel initramfs debug log to sdcard"
	LOG_FILE="/sdcard/initramfs_output.log"
	rm -f $LOG_FILE && touch $LOG_FILE

	mknod /root/stdout_and_stderr.pipe p
	cat /root/stdout_and_stderr.pipe | tee $LOG_FILE &
	exec 1>/root/stdout_and_stderr.pipe
	exec 2>/root/stdout_and_stderr.pipe
fi


clear_unused_rootfs_space() {
	# The rootfs, appfs, drivers Wyze partitions have a total size of 8978432.
	# This is the most I can write with a stock u-boot bootloader.
	# However the mtd partition is 13828096 bytes and runs into the old config partition
	# This causes JFFS mount issues because when JFFS tries to mount it reads some of
	# the old stuff and corrupts things.
	#
	# To fix this we will zero out the unused blocks. After they are zeroed
	# we will mount the jffs filesystem which will autocreate CLEANMARKER
	# blocks.
	#
	# <mtdblock2 size> - <rootfs+appfs+drivers size> = <remainder>
	#
	# 13828096 bytes - 8978432 bytes = 4849664 bytes
	# 
	# 4849664 bytes in 32768 byte blocks is:
	#
	# 4849664 / 32768 = 148 blocks
	#
	# This command writes zeros
	# dd if=/dev/zero of=/dev/mtdblock2 seek=274 count=148 bs=32768
	#
	# This one actually writes clean blocks
	# New versions of flash_erase use the offset in blocks.
	# Older ones like we have need it in bytes
	# flash_erase --jffs2 /dev/mtd2 274 148

	# Check the MD5 of the first block (32768 bytes)
	UNUSED_ROOTFS_MD5SUM=`dd if=/dev/mtdblock2 skip=274 bs=32768 count=1 status=none | md5sum | cut -d ' ' -f 1`

	if [[ "$UNUSED_ROOTFS_MD5SUM" != "2e2f3362dc6f14322e25bdd71dc38223" ]]; then
		echo "Wiping unused flash. UNUSED_ROOTFS_MD5SUM: $UNUSED_ROOTFS_MD5SUM"

		dd if=/dev/zero of=/dev/mtdblock2 seek=274 count=148 bs=32768

		if [[ $? == 0 ]]; then
			echo "Flash successfully wiped"			
		fi
	fi
}
clear_unused_rootfs_space

mkdir -p /jffsroot

# This mount will cause the zero'ed out blocks to turn into jffs2 cleanblocks
# that look like this hexdump:
#
# 0000000 1985 2003 000c 0000 b0b1 e41e ffff ffff
# 0000010 ffff ffff ffff ffff ffff ffff ffff ffff
# *
# 0008000 1985 2003 000c 0000 b0b1 e41e ffff ffff
# 0008010 ffff ffff ffff ffff ffff ffff ffff ffff
# *
# 0010000 1985 2003 000c 0000 b0b1 e41e ffff ffff
# 0010010 ffff ffff ffff ffff ffff ffff ffff ffff

mount -t jffs2 /dev/mtdblock2 /jffsroot
echo "Mounted jffsroot"

find /jffsroot

mkdir -p /newroot

# Setup zram root file system. Use 4K blocks because zram
# does not include any option to control block size. It is hard-coded.

#echo 48M > /sys/block/zram0/disksize
#reducing the zram0 size to leave more ram for applications
echo 40M > /sys/block/zram0/disksize

busybox mke2fs /dev/zram0 -b 4096
mount /dev/zram0 /newroot

# Checks for a file and if present writes a new bootloader
upgrade_bootloader() {
	UPGRADE_BOOTLOADER_FILE=/sdcard/DO_BOOTLOADER_UPGRADE
	UBOOT_FILE=/sdcard/u-boot-lzo-with-spl.bin

	if [[ -f "$UPGRADE_BOOTLOADER_FILE" && -f "$UBOOT_FILE" ]]; then
		echo "Upgrading bootloader using file: $UBOOT_FILE"

		# Do a blue heartbeat while upgrading bootloader
		echo "none" > /sys/class/leds/led_blue/trigger
		echo "none" > /sys/class/leds/led_yellow/trigger
		echo "heartbeat" > /sys/class/leds/led_blue/trigger

		# Backup old bootloader
		dd if=/dev/mtdblock0 of="/sdcard/uboot_backup.bin"

		# Erase the bootloader
		/bin/flash_eraseall /dev/mtd0

		# Flash new bootloader
		dd if=$UBOOT_FILE of=/dev/mtdblock0

		# Remove the file to indicate we've done the upgrade
		rm "/sdcard/$UPGRADE_BOOTLOADER_FILE"

		# Set leds back to yellow blink
		echo "none" > /sys/class/leds/led_blue/trigger
		echo "timer" > /sys/class/leds/led_yellow/trigger
	fi;
}
upgrade_bootloader

wipe_rootfs_mtd_partition() {
	if [[ "$WIPE_ROOTFS" == "1" ]]; then
		echo "Wiping /dev/mtd2 (rootfs partition)"
		# Do a blue heartbeat
		echo "none" > /sys/class/leds/led_blue/trigger
		echo "none" > /sys/class/leds/led_yellow/trigger
		echo "heartbeat" > /sys/class/leds/led_blue/trigger

		umount /jffsroot
		/bin/flash_eraseall /dev/mtd2

		# Set leds back to yellow blink
		echo "none" > /sys/class/leds/led_blue/trigger
		echo "timer" > /sys/class/leds/led_yellow/trigger

		echo "Wipe complete. Remove WIPE_ROOTFS flag and reflash the camera."
	fi
}
wipe_rootfs_mtd_partition




# Unarchive the root file system to the new root directory
tar -xvf /jffsroot/rootfs.tar.xz -C /newroot

if [ $? != 0 ]
then
  echo "Error: Extracting root filesystem failed."
  echo "This happens on occasion from a bad flash. Try flashing again."

  echo "md5sum of /jffsroot/rootfs.tar.xz: "
  md5sum /jffsroot/rootfs.tar.xz
  rm -rf /jffsroot/*

  exec /bin/sh
  exit 1
fi

umount /jffsroot

#unmount sdcard if mounted
if [ -e /dev/mmcblk0p1 ]; then
  umount /sdcard
fi

rm -rf /newroot/dev
rm -rf /newroot/sys

mkdir /newroot/dev
mkdir /newroot/sys

mount --move /dev /newroot/dev
mount --move /sys /newroot/sys
mount --move /proc /newroot/proc


#/bin/busybox --install -s
# ls -i /

echo "Switching root to /newroot"

# Switch back to normal logging
exec 1>/dev/console
exec 2>/dev/console

# switch_root moves already mounted /proc, /dev, /sys and /run to newroot
exec busybox switch_root /newroot /sbin/init


# /sbin/init can only be started as PID 1 but we are already PID 1
# The solution is to execute `exec /sbin/init` while we are still inside
# Will inherit the PID (PID 1)

#echo "Starting /sbin/init"
#exec /sbin/init $*
